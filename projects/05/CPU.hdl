// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction Decoding
    // i xx a cccccc ddd jjj
    //  i 0=A instruction
    //    1=C instruction
    //  B instructions
    //    a & c bits code the comp
    //    d codes dest parts
    //    j codes jump
    //  A instructions
    //    15 bits other than i are 15-bit constant

    // outM & addressM
      // Mux going into A Register
      //  Takes in instruction and output from ALU
        // Not
        // IN in;
        // OUT out;
        Not(in=instruction[15],out=Ainstruction);

        // Or
        // IN a, b;
        // OUT out;
        Or(a=Ainstruction,b=instruction[5],out=ARegisterLoad);

        // Mux16
        // IN  a, b, sel;
        // OUT out;
        Mux16(a[0..14]=instruction[0..14],a[15]=false,b=ALUOutput,sel=instruction[15],out=MuxOutAIn);

        // ARegister
        // IN in[16], load
        // OUT out[16]
        ARegister(in=MuxOutAIn,load=ARegisterLoad,out[0..14]=addressM,out=ARegisterOut);

      // A or M Mux
        // Mux16
        // IN  a, b, sel;
        // OUT out;
        Mux16(a=ARegisterOut,b=inM,sel=instruction[12],out=MuxOutAorM);

      // D Register
        // And
        // IN a, b;
        // OUT out;
        And(a=instruction[4],b=instruction[15],out=DRegisterLoad);

        // DRegister
        // IN in[16], load
        // OUT out[16]
        DRegister(in=ALUOutput,load=DRegisterLoad,out=DRegisterOut);

    // ALU Logic
      // ALU
      // IN x[16], y[16]
      //    zx  Zero the X input
      //    nx  Negate the X input
      //    zy  Zero the Y input
      //    ny  Negate the Y input
      //    f   Function code: 1 for ADD, 0 for AND
      //    no  Negate the out output
      // OUT out[16],
      //    zr  True iff out=0
      //    ng  True iff out<0
      ALU(x=DRegisterOut,y=MuxOutAorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOutput,out=outM,zr=ZR,ng=NG);

  // writeM
    // And
    // IN a, b;
    // OUT out;
    And(a=instruction[3],b=instruction[15],out=writeM);

  // pc logic
    // Not
    // IN in;
    // OUT out;
    Not(in=ZR,out=notZR);

    // Not
    // IN in;
    // OUT out;
    Not(in=NG,out=notNG);

    // And
    // IN a, b;
    // OUT out;
    And(a=notZR,b=notNG,out=pos);

    // And
    // IN a, b;
    // OUT out;
    And(a=instruction[1],b=ZR,out=jeq);

    // And
    // IN a, b;
    // OUT out;
    And(a=instruction[2],b=NG,out=jlt);

    // And
    // IN a, b;
    // OUT out;
    And(a=instruction[0],b=pos,out=jPositive);

    // Or
    // IN a, b;
    // OUT out;
    Or(a=jlt,b=jeq,out=jltORjeq);

    // Or
    // IN a, b;
    // OUT out;
    Or(a=jltORjeq,b=jPositive,out=jmp);

    // And
    // IN a, b;
    // OUT out;
    And(a=instruction[15],b=jmp,out=jump);

    // PC 16-bit counter
    // IN in[16], inc, load, reset
    // OUT out[16]
    PC(in=ARegisterOut,inc=true,load=jump,reset=reset,out[0..14]=pc);
}
