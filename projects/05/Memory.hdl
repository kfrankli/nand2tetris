// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

/**
 * Memory: This chip includes three chip-parts: RAM16K, Screen, and
 * Keyboard. The Screen and the Keyboard are available as built-in
 * chips, and thus there is no need to implement them. Although the
 * RAM16K chip was built in Project 3, we recommend using its built-in
 * version, as it provides a debugging-friendly GUI.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // IN in[16], load, address[14];
    // OUT out[16];
    RAM16K(in=in,load=loadRAM,address=address[0..13],out=outRAM);
    // In in[16], load, address[13];
    // OUT out[16];
    Screen(in=in,load=loadScreen,address=address[0..12],out=outScreen);
    // OUT out[16];
    Keyboard(out=outKeyboard);

    //    +------------RAM-14-bits----+
    //  |x|x|x x x x x x x x x x x x x|
    //  |   +---------SCREEN-13-bits--+
    //  +---+
    //   DMux & Mux

    // IN in, sel[2];
    // OUT a, b, c, d;
    DMux4Way(in=load,sel=address[13..14],a=loadRAMa,b=loadRAMb,c=loadScreen,d=loadKeyboard);
    // IN a, b;
    // OUT out;
    Or(a=loadRAMa,b=loadRAMb,out=loadRAM);

    // IN a[16], b[16], c[16], d[16], sel[2];
    // OUT out[16]
    Mux4Way16(a=outRAM,b=outRAM,c=outScreen,d=outKeyboard,sel=address[13..14],out=out);
  }
